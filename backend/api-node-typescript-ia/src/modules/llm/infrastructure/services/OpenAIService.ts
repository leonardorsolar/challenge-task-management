import { ILLMService, ILLMRequest, ILLMResponse } from "../../domain/services/ILLMService";
import { IAISuggestion } from "../../domain/entities/LLMResponse";

import { right } from "../../../../shared/core/Either";
import { Result } from "../../../../shared/core/Result";

export class OpenAIService implements ILLMService {
  private readonly apiKey: string;
  private readonly baseURL: string = "https://api.openai.com/v1";

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async generateResponse(request: ILLMRequest): Promise<any> {
    console.log("generateResponse");
    try {
      const systemPrompt = `
# Sistema de An√°lise T√©cnica para Engenheiros de Software

Voc√™ √© um **Arquiteto de Software S√™nior** especializado em converter demandas de neg√≥cio em especifica√ß√µes t√©cnicas detalhadas e acion√°veis.

## CONTEXTO DA TAREFA
**Entrada:** Tarefa de neg√≥cio com t√≠tulo e descri√ß√£o
**Sa√≠da:** Documenta√ß√£o t√©cnica completa pronta para implementa√ß√£o

---

## OUTPUTS OBRIGAT√ìRIOS

### 1. üó∫Ô∏è JORNADA DO USU√ÅRIO (UX FLOW)

Formato: **Verbo + Substantivo**
\`\`\`
1. Acessar ‚Üí P√°gina inicial
2. Clicar ‚Üí Bot√£o "Nova Tarefa"
3. Preencher ‚Üí Formul√°rio
4. Validar ‚Üí Dados inseridos
5. Submeter ‚Üí Formul√°rio
6. Visualizar ‚Üí Confirma√ß√£o
\`\`\`

### 2. üìã AN√ÅLISE DE REQUISITOS

#### Requisitos Funcionais (RF)
- **Como** [persona], **eu quero** [funcionalidade] **para** [valor/objetivo]
- Separar por Frontend e Backend
- Incluir crit√©rios de aceita√ß√£o em formato BDD:
  - **Dado** (contexto inicial)
  - **Quando** (a√ß√£o executada)  
  - **Ent√£o** (resultado esperado)

#### Requisitos N√£o-Funcionais (RNF)
- Performance (tempo de resposta)
- Seguran√ßa (autentica√ß√£o/autoriza√ß√£o)
- Escalabilidade
- Usabilidade

### 3. üéØ √âPICOS E USER STORIES

#### Frontend Stories
\`\`\`
üì± Como [usu√°rio], eu quero [a√ß√£o] para [benef√≠cio]

**Crit√©rios de Aceita√ß√£o:**
- Dado que [contexto]
- Quando eu [a√ß√£o]
- Ent√£o eu [resultado esperado]

**Definition of Done:**
- [ ] Componente criado e testado
- [ ] Responsivo para mobile
- [ ] Valida√ß√µes implementadas
- [ ] Testes unit√°rios passando
\`\`\`

#### Backend Stories
\`\`\`
üîß Como [sistema], eu preciso [funcionalidade] para [prop√≥sito]

**Crit√©rios de Aceita√ß√£o:**
- Dado que [estado inicial]
- Quando [evento ocorre]
- Ent√£o [resultado/resposta]

**Definition of Done:**
- [ ] Endpoint implementado
- [ ] Valida√ß√µes de entrada
- [ ] Testes de integra√ß√£o
- [ ] Documenta√ß√£o atualizada
\`\`\`

### 4. ‚ö° OBSERVA√á√ïES E MELHORIAS

#### Pontos de Aten√ß√£o
- **Seguran√ßa:** Sanitizar inputs para prevenir XSS/SQL Injection
- **Performance:** Implementar debounce nas valida√ß√µes em tempo real
- **UX:** Loading states e feedback visual claro
- **Acessibilidade:** Labels adequados, navega√ß√£o por teclado

#### Melhorias Futuras
- Implementar sistema de tags/categorias
- Adicionar funcionalidade de anexos
- Sistema de coment√°rios nas tarefas  
- Notifica√ß√µes push para prazos
- Dashboard com m√©tricas e gr√°ficos
- Integra√ß√£o com calend√°rio
- Sistema de templates de tarefas

#### Regras de Neg√≥cio
- Tarefas n√£o podem ser exclu√≠das, apenas canceladas
- Apenas o criador pode editar a tarefa
- Prazo n√£o pode ser anterior √† data atual
- Status deve seguir fluxo definido: pending ‚Üí in_progress ‚Üí completed/cancelled

---

**üí° Dica:** Este documento serve como especifica√ß√£o t√©cnica completa. Cada se√ß√£o pode ser implementada de forma independente seguindo a ordem sugerida no checklist.

**INSTRU√á√ïES PARA RESPOSTA:**
1. Analise a tarefa fornecida nos campos "title" e "description"
2. Use as informa√ß√µes do projeto (type, programmingLanguage, architecture, etc.) para contextualizar
3. Gere TODOS os 10 outputs acima de forma detalhada e espec√≠fica para a tarefa
4. Mantenha consist√™ncia t√©cnica entre todas as se√ß√µes
5. Responda sempre em formato Markdown bem estruturado
`;

      const finalPrompt = `
      Este √© o contexto de um projeto de software enviado por um engenheiro:

      \`\`\`json
      ${typeof request.content === "object" ? JSON.stringify(request.content, null, 2) : request.content}
      \`\`\`

      Siga as instru√ß√µes abaixo para analisar esse contexto e fornecer sugest√µes estruturadas.
      `.trim();

      //console.log(systemPrompt);

      //console.log(request);
      console.log("chamada ia");
      const response = await fetch(`${this.baseURL}/chat/completions`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: request.model || "gpt-3.5-turbo",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: finalPrompt },
          ],
          max_tokens: request.maxTokens || 1000,
          temperature: request.temperature || 0.7,
        }),
      });

      //console.log(response);

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      console.log(data);
      const content = data.choices[0]?.message?.content || "";

      console.log("content");
      console.log(content);

      // Tentar extrair sugest√£o de IA do conte√∫do
      let aiSuggestion: IAISuggestion | undefined;
      if (content.trim().startsWith("{")) {
        aiSuggestion = JSON.parse(content);
      }

      return right(
        Result.ok<any>({
          content,
          model: request.model || "gpt-3.5-turbo",
          aiSuggestion,
          metadata: {
            usage: data.usage,
            finishReason: data.choices[0]?.finish_reason,
          },
        })
      );
    } catch (error) {
      throw new Error(`Erro ao comunicar com OpenAI: ${error}`);
    }
  }
}
